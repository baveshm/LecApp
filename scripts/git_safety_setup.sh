#!/usr/bin/env bash
set -euo pipefail

# Safety setup script to prevent accidental pushes or PRs to original upstream repository.
# Usage:
#   ./scripts/git_safety_setup.sh             # Applies recommended protections
#   ALLOW_UPSTREAM_PUSH=1 ./scripts/git_safety_setup.sh   # Override block (not recommended)
#
# What it does:
# 1. Optionally add an 'upstream' remote (read-only) if a URL is supplied
# 2. Marks default branch (main/master) as protected through a pre-push hook
# 3. Installs a pre-push hook that blocks pushes to protected branches or upstream
# 4. Enables push protection settings (git >=2.40) if available
# 5. Sets advice to warn on force pushes to protected branches
#
# Idempotent: Running multiple times is safe.

PROTECTED_BRANCHES_REGEX="^(master|main|upstream|release|production)$"
UPSTREAM_URL="${UPSTREAM_URL:-}"  # Optionally: UPSTREAM_URL=https://github.com/original/owner/repo.git
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
HOOKS_DIR="$REPO_ROOT/.git/hooks"
PRE_PUSH_HOOK="$HOOKS_DIR/pre-push"

log() { echo -e "[git-safety] $*"; }
warn() { echo -e "[git-safety][WARN] $*" >&2; }

git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo "Not inside a git repo" >&2; exit 1; }

# 1. Configure upstream remote if provided and not present
if [[ -n "$UPSTREAM_URL" ]]; then
  if git remote get-url upstream >/dev/null 2>&1; then
    log "upstream remote already exists -> $(git remote get-url upstream)"
  else
    log "Adding upstream remote (fetch-only) -> $UPSTREAM_URL"
    git remote add upstream "$UPSTREAM_URL"
  fi
  # Prevent accidental push to upstream by setting it to pushURL= no_push
  git remote set-url --push upstream no_push 2>/dev/null || true
  log "Configured upstream with disabled push URL"
fi

# 2. Enable push protection (if supported by Git version)
if git config --global --type=bool --get push.protectCurrent >/dev/null 2>&1; then
  git config push.protectCurrent true || true
else
  # Fallback: set anyway (older git will ignore)
  git config push.protectCurrent true || true
fi

git config advice.forceDeleteBranch true || true

git config receive.denyCurrentBranch updateInstead 2>/dev/null || true

# 3. Install pre-push hook
mkdir -p "$HOOKS_DIR"
cat > "$PRE_PUSH_HOOK" <<'EOF'
#!/usr/bin/env bash
# Pre-push safety hook (auto-generated by git_safety_setup.sh)
set -euo pipefail

PROTECTED_BRANCHES_REGEX="^(master|main|upstream|release|production)$"
ALLOW_UPSTREAM_PUSH="${ALLOW_UPSTREAM_PUSH:-0}"

# stdin provides: <local ref> <local sha1> <remote ref> <remote sha1>
while read -r local_ref local_sha remote_ref remote_sha; do
  # Example: refs/heads/master
  branch="${local_ref##refs/heads/}"
  remote_branch="${remote_ref##refs/heads/}"

  # Determine remote name from arguments (git passes: <remote_name> <remote_url>)
  remote_name="$1"

  # Block pushes to upstream remote always (unless override flag set)
  if [[ "$remote_name" == "upstream" && "$ALLOW_UPSTREAM_PUSH" != "1" ]]; then
    echo "[BLOCKED] Push to 'upstream' remote is disabled. Set ALLOW_UPSTREAM_PUSH=1 to override (not recommended)." >&2
    exit 1
  fi

  # Block protected branches unless explicitly allowed via environment override
  if [[ "$branch" =~ $PROTECTED_BRANCHES_REGEX ]]; then
    if [[ "${ALLOW_PROTECTED_PUSH:-0}" != "1" ]]; then
      echo "[BLOCKED] Push to protected branch '$branch'. Set ALLOW_PROTECTED_PUSH=1 to override." >&2
      exit 1
    fi
  fi

  # Also block force-push attempts on any protected branch
  if git rev-parse --verify "$branch" >/dev/null 2>&1; then
    upstream_branch="origin/$branch"
    if git rev-parse --verify "$upstream_branch" >/dev/null 2>&1; then
      # Detect non-fast-forward attempt
      if ! git merge-base --is-ancestor "$upstream_branch" "$branch"; then
        if [[ "$branch" =~ $PROTECTED_BRANCHES_REGEX && "${ALLOW_PROTECTED_FORCE_PUSH:-0}" != "1" ]]; then
          echo "[BLOCKED] Non fast-forward push to protected branch '$branch'. Set ALLOW_PROTECTED_FORCE_PUSH=1 to override." >&2
          exit 1
        fi
      fi
    fi
  fi

done

exit 0
EOF
chmod +x "$PRE_PUSH_HOOK"
log "Installed pre-push hook at $PRE_PUSH_HOOK"

# 4. Optional: mark local default branches read-only with advice
for b in master main; do
  if git show-ref --verify --quiet refs/heads/$b; then
    log "Detected branch '$b' (protected by hook)"
  fi
done

cat <<'SUMMARY'

Safeguards applied:
- (If provided) upstream remote added with disabled push URL.
- pre-push hook blocks pushes to: master, main, upstream, release, production.
- pre-push hook blocks ALL pushes to remote named 'upstream' unless ALLOW_UPSTREAM_PUSH=1.
- Non fast-forward (force) pushes to protected branches blocked unless override vars set.

Override environment variables (use sparingly):
  ALLOW_UPSTREAM_PUSH=1             Allow pushing to upstream remote
  ALLOW_PROTECTED_PUSH=1            Allow push to protected branch
  ALLOW_PROTECTED_FORCE_PUSH=1      Allow non-FF (force) push to protected branch

Recommended next step if this is a fork:
  export UPSTREAM_URL="https://github.com/original-owner/LecApp.git"
  ./scripts/git_safety_setup.sh

To inspect hook:
  sed -n '1,160p' .git/hooks/pre-push

To remove hook:
  rm .git/hooks/pre-push

SUMMARY
